//Please please please, firstly check these : 9. 242. Valid Anagram (Easy)   or  
//https://github.com/YourOwnItsMeDHC/DSA-Let-s-Fire-/blob/master/Strings/Easy/9.%20%20%20242.%20Valid%20Anagram%F0%9F%91%8D%F0%9F%91%8D

//Using HashMap , and sorting each String of String[] :
class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        
        if(strs == null || strs.length == 0) {
            return new ArrayList<>();
        }
        
        HashMap<String, List<String>> map = new HashMap<>();
        
        for(int i=0; i<strs.length; i++) {
            String s1 = strs[i];
            char[] arr = s1.toCharArray();
            Arrays.sort(arr);
            // String str = new String(arr);   //or   String str = String.valueOf(arr);
            String str = String.valueOf(arr);
            
            if(map.containsKey(str)) {
                map.get(str).add(s1);
            }
            else {
                map.put(str, new ArrayList<>());
                map.get(str).add(s1);
            }
        }
        return new ArrayList<>(map.values());
    }
}

/*
Time Complexity: O(n * klog(k)) since we are sorting k characters n times in the loop
Sorting took klog(k) time, where, k is the maximum length of a String
*/



































//Same as above, but,
//Using HashMap , and instead of sorting each String of String[], use extra array :
class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        
        if(strs == null || strs.length == 0) {
            return new ArrayList<>();
        }
        
        HashMap<String, List<String>> map = new HashMap<>();
        
        for(int i=0; i<strs.length; i++) {
            String s1 = strs[i];
            char[] arr = s1.toCharArray();
            
            char[] temp = new char[26];
            for(char c : arr) {
                temp[c - 'a']++;
            }
            
            String str = new String(temp);
            // String str = String.valueOf(temp);
            
            if(map.containsKey(str)) {
                map.get(str).add(s1);
            }
            else {
                map.put(str, new ArrayList<>());
                map.get(str).add(s1);
            }
        }
        return new ArrayList<>(map.values());
    }
}

/*
Time Complexity: O(n * klog(k)) since we are sorting k characters n times in the loop
Sorting took klog(k) time, where, k is the maximum length of a String
*/




























//Using HashMap inside HashMap as a key :
//https://www.youtube.com/watch?v=NNBQik4phMI
class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        
        // Inner hashmap counts frequency 
		// of characters in a string. 
		// Outer hashmap for if same 
		// frequency characters are present in 
		// in a string then it will add it to 
		// the arraylist.
        
        HashMap<HashMap<Character, Integer> , List<String>> bmap = new HashMap<>();
        
        for(String str : strs) {
            HashMap<Character, Integer> fmap = new HashMap<>();
            
            // Counting the frequency of the 
			// characters present in a string 
            
            for(int i=0; i<str.length(); i++) {
                char ch = str.charAt(i);
                fmap.put(ch, fmap.getOrDefault(ch, 0) + 1);
            }
            
            
            // If the same frequency of chanracters 
			// are alraedy present then add that 
			// string into that arraylist otherwise 
			// created a new arraylist and add that string
            
            if(bmap.containsKey(fmap) == false) {
                List<String> list = new ArrayList<>();
                list.add(str);
                bmap.put(fmap, list);
            }
            else {
                //bmap.get(fmap) : takes values, which is stored in key=fmap
                //Where as, fmap has values : a list of anagram String
                
                List<String> list = bmap.get(fmap);
                list.add(str);
            }
        }
        
        // Stores the result in a arraylist
        
        return new ArrayList<>(bmap.values());
    }
}
/*
Above, we are not sorting each String of String[]
(Sorting took klog(k) time, where, k is the maximum length of a String)

But, here, we are storing number of frequencies of character in each String of String[]
Storing number of frequencies takes : O(k)
So, Time Complexity: O(n * k)
*/





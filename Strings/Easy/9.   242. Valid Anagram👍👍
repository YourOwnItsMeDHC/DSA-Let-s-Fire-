//4 Approaches : https://www.geeksforgeeks.org/check-whether-two-strings-are-anagram-of-each-other/

/*
The idea is simple. It creates a size 26 int arrays as buckets for each letter in alphabet. It increments the bucket value with String s and decrement with string t. So if they are anagrams, all buckets should remain with initial value which is zero. So just checking that and return.

Put an extra conditional statement in the second loop. Average time will be much better as it does not have to go through the 3rd loop every time. With this line, as soon as a discrepancy is found, it will return false and break out of the loops.

Eg : s = aab , t = aaa
So,  alphabets = [0 1 2 3 ........ 25] , length=26
        Values =  0 0 0 0 ......... 0
++ in "s"      =  1 ....
++ in "s"      =  2 .......                [Two times 'a' in "s"]
++ in "s"      =  2 1 .......              [One time 'b' in "s"]

-- in "t"      =  1 ....
-- in "t"      =  0 ....
-- in "t"      =  -1 ....                  [Three times 'a' in "t"]
So, here just return false
*/

//Creating an Extra Array :
// class Solution {
//     public boolean isAnagram(String s, String t) {
        

//         if(s.length() != t.length()) {
//             return false;
//         }
        
//         int[] alphabets = new int[26];
        
//         for(int i=0; i<s.length(); i++) {
//             alphabets[s.charAt(i) - 97]++;  //alphabets[s.charAt(i) - 'a']++;
//         }
        
//         for(int i=0; i<t.length(); i++) {
//             alphabets[t.charAt(i) - 97]--;
            
//             if(alphabets[t.charAt(i) - 'a'] < 0) {
//                 return false;
//             }
//         }
        
//         for(int i=0; i<alphabets.length; i++) {
//             if(alphabets[i] > 0) {
//                 return false;
//             }
//         }
//         return true;
//     }
// }





















//By sorting both the Strings :
//Two Approaches to sort a string : https://www.geeksforgeeks.org/sort-a-string-in-java-2-different-ways/
class Solution {
    public boolean isAnagram(String s, String t) {
        
        if(s.length() != t.length()) {
            return false;
        }
        
        char[] word1 = s.toCharArray();
        char[] word2 = t.toCharArray();
        
        Arrays.sort(word1);
        Arrays.sort(word2);
        
        for(int i=0; i<word1.length; i++) {
            if(word1[i] != word2[i]) {
                return false;
            }
        }
        
        return true;        
    }
}
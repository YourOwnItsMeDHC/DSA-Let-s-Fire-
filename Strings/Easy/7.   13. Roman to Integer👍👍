//Can also be solve usin "Map", but I didn't try that

// //Approach : Count every Symbol and add its value to the sum, and minus the extra part of special cases.
// class Solution {
//     public int romanToInt(String s) {
        
//         int sum = 0;
//         for(int i=0; i<s.length(); i++) {
//             if(s.charAt(i) == 'I') {
//                 sum += 1;
//             }
//             else if(s.charAt(i) == 'V') {
//                 sum += 5;
//             }
//             else if(s.charAt(i) == 'X') {
//                 sum += 10;
//             }
//             else if(s.charAt(i) == 'L') {
//                 sum += 50;
//             }
//             else if(s.charAt(i) == 'C') {
//                 sum += 100;
//             }
//             else if(s.charAt(i) == 'D') {
//                 sum += 500;
//             }
//             else if(s.charAt(i) == 'M') {
//                 sum += 1000;
//             }
//         }
        
//         if(s.indexOf("IV") != -1) {
//             //VI=6, and IV=4, agar VI hota to 6 add karte, par yaha IV hai to
//             //4 add kar rahe hai, therefore 6-4=2
//             sum -= 2;
//         }
//         if(s.indexOf("IX") != -1) {
//             //XI=11, IX=9, so 11-9=2
//             sum -= 2;
//         }
//         if(s.indexOf("XL") != -1) {
//             //LX=60, XL=40, so 60-40=20
//             sum -= 20;
//         }
//         if(s.indexOf("XC") != -1) {
//             //CX=110, XC=90, so 110-90=20
//             sum -= 20;
//         }
//         if(s.indexOf("CD") != -1) {
//             //DC=600, CD=400, so 600-400=200
//             sum -= 200;
//         }
//         if(s.indexOf("CM") != -1) {
//             //MC=1100, CM=990, so 1100-990=200
//             sum -= 200;
//         }
        
//         return sum;
//     }
// }















// //Same as above, but using "Switch" case :
// class Solution {
//     public int romanToInt(String s) {
        
//         int sum = 0;
//         for(int i=0; i<s.length(); i++) {
//             char letter = s.charAt(i);
            
//             switch(letter) {
//                 case 'I' :
//                     sum += 1;
//                     break;
                    
//                 case 'V' :
//                     sum += 5;
//                     break;
                        
//                 case 'X' :
//                     sum += 10;
//                     break;
                    
//                 case 'L' :
//                     sum += 50;
//                     break;
                    
//                 case 'C' :
//                     sum += 100;
//                     break;
                    
//                 case 'D' :
//                     sum += 500;
//                     break;
                    
//                 case 'M' :
//                     sum += 1000;
//                     break;    
//             }
//         }
        
//         if(s.indexOf("IV") != -1) {
//             sum -= 2;
//         }
//         if(s.indexOf("IX") != -1) {
//             sum -= 2;
//         }
//         if(s.indexOf("XL") != -1) {
//             sum -= 20;
//         }
//         if(s.indexOf("XC") != -1) {
//             sum -= 20;
//         }
//         if(s.indexOf("CD") != -1) {
//             sum -= 200;
//         }
//         if(s.indexOf("CM") != -1) {
//             sum -= 200;
//         }        
        
//         return sum;
//     }
// }



















//OPTIMIZED APPROACH
//Same as above, but by doing some mmodification in "Switch" case :
//SCAN STRING ONCE :
//Scan from right to left :

/*

This is a very clean and elegant solution mainly because it directly follow the roman numeral rules.
I had a trouble understanding when the subtraction happen in some of the cases.

This link was helpful to understand it: https://www.knowtheromans.co.uk/Categories/SubCatagories/RomanNumerals/

There are six instances where subtraction is used:

  ⋅ I can be placed before V (5) and X (10) to make 4 and 9. 
  ⋅ X can be placed before L (50) and C (100) to make 40 and 90. 
  ⋅ C can be placed before D (500) and M (1000) to make 400 and 900. 

*/
class Solution {
    public int romanToInt(String s) {
        
        int sum = 0;
        for(int i=s.length()-1; i>=0; i--) {
            char letter = s.charAt(i);
            
            switch(letter) {
                case 'I' :
                    sum += (sum>=5 ? -1 : 1);
                    break;
                    
                case 'V' :
                    sum += 5;
                    break;
                        
                case 'X' :
                    sum += 10 * (sum>=50 ? -1 : 1);
                    //sum += (sum>=50 ? -10 : 10);
                    break;
                    
                case 'L' :
                    sum += 50;
                    break;
                    
                case 'C' :
                    sum += 100 * (sum>=500 ? -1 : 1);
                    //sum += (sum>=500 ? -100 : 100);
                    break;
                    
                case 'D' :
                    sum += 500;
                    break;
                    
                case 'M' :
                    sum += 1000;
                    break;    
            }
        }
        
        return sum;
        
    }
}
//Optimized Approach : (DC)
class Solution {
    public void setZeroes(int[][] matrix) {         
        boolean row0 = false, col0 = false;
        
        //Searching for element with value = 0
        for(int i=0; i<matrix.length; i++) {
            for(int j=0; j<matrix[0].length; j++) {
                if(matrix[i][j] == 0) {
                    if(i == 0) {             //Is these element is at 0th row
                        row0 = true;
                    }
                    if(j == 0) {             //Is these element is at 0th row  
                        col0 = true;
                    }
                    matrix[0][j] = 0;
                    matrix[i][0] = 0;
                }
            }
        }
        
        //Making Elements Row and Column as 0
        //Not checking for i=0 & j=0 , because they are reference for us
        for(int i=1; i<matrix.length; i++) {
            for(int j=1; j<matrix[0].length; j++) {
                if(matrix[i][0] == 0 || matrix[0][j] == 0) {
                    matrix[i][j] = 0;
                }
            }
        }
   
   //If any element in 0th Row is already 0, make whole 0th row's element as 0 
        if(row0) {
            //Make each Column of 0th Row as 0
            for(int j=0; j<matrix[0].length; j++) {
                matrix[0][j] = 0;
            }
        }
        
  //If any element in 0th Column is already 0, make whole 0th Column's element as 0 
        if(col0) {
            //Make each Row of 0th Column as 0
            for(int i=0; i<matrix.length; i++) {
                matrix[i][0] = 0;
            }
        }
        
    }
}







// //Optimized Approach : (Space is Optimized)
// class Solution {
//     public void setZeroes(int[][] matrix) {        
//         boolean isCol = false;
//         int m = matrix.length;
//         int n = matrix[0].length;
        
//         for(int i=0; i<m; i++) {
//             if(matrix[i][0] == 0) { //In 0th col, is there any element with value 0
                
//              //isCol means , is there any element in 0th Column having value 0
//                 isCol = true;
//             }
        
//     //We haven't traverse from j=0, because j=0 is already traversed above in "if"
//             for(int j=1; j<n; j++) {
//                 if(matrix[i][j] == 0) {
//                    matrix[i][0] = 0;
//                    matrix[0][j] = 0;
//                 }
//             }
//         }
        
//         for(int i=m-1; i>=0; i--) {
//             for(int j=n-1; j>=1; j--) {
//                 if(matrix[i][0] == 0 || matrix[0][j] == 0) {
//                     matrix[i][j] = 0;
//                 }
//             }    
//         //Make 0th Column as 0
//         if(isCol) {
//             matrix[i][0] = 0;
//         }
//       }
        
// //         for(int i=0; i<m; i++) {
// //             if(matrix[i][0] == 0) {   //then make all elements of these Row as 0
// //                 for(int j=0; j<n; j++) {
// //                     matrix[i][j] = 0;
// //                 }
// //             }
// //         }
        
// //         for(int i=0; i<n; i++) {
// //             if(matrix[0][i] == 0){   //then make all elements of these Col as 0
// //                 for(int j=0; j<m; j++) {
// //                     matrix[j][i] = 0; //row will change, column will be the same
// //                 }
// //             }
// //         }
        
// //         if(matrix[0][0] == 0){
// //            for(int i=0; i<n; i++) {
// //                matrix[0][i] = 0;
// //            }    
// //         }
        
// //         if(isCol) {
// //             for(int i=0; i<m; i++) {
// //                 matrix[i][0] = 0;
// //             }
// //         }
//     }
// }





// //Better Approach 2
// class Solution {
//     public void setZeroes(int[][] matrix) {
        
//         int rows = matrix.length;
//         int cols = matrix[0].length;
        
//         int[] dummyArr1 = new int[rows];      //Array for Rows
//         int[] dummyArr2 = new int[cols];      //Array for Columns
        
//         //Initially both dummy Array will be filled as -1
//         Arrays.fill(dummyArr1, -1);
//         Arrays.fill(dummyArr2, -1);
        
//         for(int i=0; i<rows; i++) {
//             for(int j=0; j<cols; j++) {
//                 if(matrix[i][j] == 0) {
//                     dummyArr1[i] = 0;   //Make that Row of dummyArr1 as 0
//                     dummyArr2[j] = 0;   //Make that Column of dummyArr2 as 0
//                 }
//             }
//         }
        
//         //Traverse again to make row and col as 0
//         for(int i=0; i<rows; i++) {
//             for(int j=0; j<cols; j++) {
//                 if(dummyArr1[i] == 0 || dummyArr2[j] == 0) {
//                     matrix[i][j] = 0;
//                 }
//             }
//         }
//     }
// }




// //Brute - Force Approach 1 : (But , it will give error , if element is already negative)
// class Solution {
//     public void setZeroes(int[][] matrix) {
        
// /* Assuming all the elements in the matrix are non-negative. Traverse through the matrix and if you find an element with value 0, then change all the elements in its row and column to -1, except when an element is 0. The reason for not changing other elements to 0, but -1, is because that might affect other columns and rows. Now traverse through the matrix again and if an element is -1 change it to 0, which will be the answer. */
        
//       int rows = matrix.length;
//       int cols = matrix[0].length;
        
//         for(int i=0; i<rows; i++) {
//             for(int j=0; j<cols; j++) {
//                 if(matrix[i][j] == 0) {
                    
                    
//  //Make Elements as -1 in all rows of same column, before the position of 0
//  //Rows will change , column will be the same
//                     int index = i-1;
//                     while(index >= 0) {
//                         if(matrix[index][j] != 0) {
//                             matrix[index][j] = -1;
//                         }
//                         index--;
//                     }
                    
//  //Make Elements as -1 in all rows of same column, after the position of 0
//  //Rows will change , column will be the same
//                     index = i+1;
//                     while(index < rows) {
//                         if(matrix[index][j] != 0) {
//                            matrix[index][j] = -1;
//                         }
//                         index++;
//                     }
                    
//  //Make Elements as -1 in all columns of same row, before the position of 0
//  //Columns will change , row will be the same
//                     index = j-1;
//                     while(index >= 0) {
//                         if(matrix[i][index] != 0) {
//                             matrix[i][index] = -1;
//                         }
//                         index--;
//                     }
                    
//  //Make Elements as -1 in all Columns of same row, before the position of 0
//  //Columns will change , row will be the same
//                     index = j+1;
//                     while(index < cols) {
//                         if(matrix[i][index] != 0) {
//                             matrix[i][index] = -1;
//                         }
//                         index++;
//                     }
//                 }
//             }
//         }
                           
// //Convert all negative (-1) into 0
//                     for(int k=0; k<rows; k++) {
//                         for(int l=0; l<cols; l++) {
//                             if(matrix[k][l] <= 0) {
//                                 matrix[k][l] = 0;
//                             }
//                         }
//                     }
//     }   
// }
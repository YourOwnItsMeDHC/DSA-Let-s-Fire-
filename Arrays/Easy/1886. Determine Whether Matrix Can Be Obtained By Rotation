class Solution {
    public boolean findRotation(int[][] mat, int[][] target) {
        for(int i=0; i<4; i++) {
            if(check(mat, target)) {
                return true;
            }
            rotate(mat);
        }
            return false;
    }
    public boolean check(int[][] mat, int[][] target) {
        for(int k=0; k<mat.length; k++) {
            for(int l=0; l<mat.length ; l++) {
                if(mat[k][l] != target[k][l]) {
                   return false;                   
                }
            }
        }
                    return true;
        }
    
    //Tranpose Matrix      Refer : 867
    public void rotate(int[][] mat) {            //Because it is n X n matriox , so no
        for(int i=0; i<mat.length; i++) {        //need to create another Array
            for(int j=0; j<i; j++) {
                int temp = mat[i][j];
                mat[i][j] = mat[j][i];
                mat[j][i] = temp;
            }
        }
        
         //Reverse i.e Flip      Refer : 832
        int start = 0;
        int end = mat.length - 1;
        
        while(start <= end) {
            for(int row=0; row<mat.length; row++) {
                int temp = mat[row][start];
                mat[row][start] = mat[row][end];
                mat[row][end] = temp;
            }
            start++;
            end--;
        }
      }  
    }
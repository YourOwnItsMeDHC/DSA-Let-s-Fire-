class Solution {
    public int search(int[] nums, int target) {
        //Find pivot
        //Search in first half (0 to pivot)
        //If not found in first half, search in second half (pivot to nums.length-1)
        
//Pivot is same as peak/largest element
//Pivot is index, from where next element is starting as in ascending order
// [3, 4, 5, 6, 7, 0, 1, 2]
//In above array, "3,4,5,6,7" and "0,1,2" is in ascending order, only "7,0" is in //descending order
        //Case : 1
//When you find that "mid is greater than mid+1", that nums[mid] is pivot
//Above we found 7 at index 4(mid) is greater than 0 at index 5(mid+1)
//Here, we get our pivot as 7 at index 4
        //Case : 2
//If mid(0) is less than mid-1(7), then pivot is mid-1 = 7
           
    int pivot = findPivot(nums);
        
        //If we didn't find pivot, it means array is not rotated
        if(pivot == -1) {
            //Here, just apply simple Binary Search
            return binarySearch(nums, target, 0, nums.length-1);
        }
        
        //If pivot is found, we have 2 ascending arrays (at left and right of pivot)
        if(nums[pivot] == target) {
            return pivot;
        }
        
        //After pivot i.e. elements at right of pivot are smaller than start element
        if(target >= nums[0]) {
            //Then, check at left part of pivot
            return binarySearch(nums, target, 0, pivot-1);
        }
        else {                                  //target < nums[start]
            //Then check at right part of pivot
            return binarySearch(nums, target, pivot+1, nums.length-1);
        }
        
  
   }
    
    //Method for finding Pivot/Peak/Largest Elementm :
    int findPivot(int[] nums) {
        int start = 0;
        int end = nums.length-1;
        while(start <= end) {
            int mid = start + (end-start)/2;
            
            //For finding pivot, we have 4 cases here :
            if(mid < end && nums[mid] > nums[mid+1]) {
                return mid;
            }
            if(mid > start && nums[mid] < nums[mid-1]) {
                return mid-1;
            }
            
            if(nums[start] >= nums[mid]) {
                //In rotated sorted BS, all the elements at left of mid are greater
                //than mid, and all the elements at right of mid are smaller than mid
                //Here, mid is smaller than start, and here we have to find largest                   //element, which will never be at right, so search at left
                end = mid-1;
            }
            else {                           //nums[start] < nums[mid]
                //Here mid is greater than start, so check at right
                start = mid+1;
            }
        }
        return -1;
    }
    
    
    
    
    //Method of Binary search :
    int binarySearch(int[] nums, int target, int start, int end) {
        while(start <= end) {
            int mid = start + (end-start)/2;
            if(target < nums[mid]) {
                end = mid-1;
            }
            else if(target > nums[mid]) {
                start = mid+1;
            }
            else {                           //start == nums[mid]
                return mid;
            }
        }
        return -1;                           //Target is not present
    }
    
}

//https://leetcode.com/problems/minimum-absolute-sum-difference/discuss/1176474/Detailed-explanation-or-binary-search-or-Java

class Solution {
    public int minAbsoluteSumDiff(int[] nums1, int[] nums2) {
       
        // Since the answer may be large, return it modulo 10^9 + 7
        int mod = (int)1e9 + 7;
        
        // Sorted copy of nums1 to use for binary search
        // int[] snums1 = new int[nums1.length];
        int[] snums1 = nums1.clone();
        Arrays.sort(snums1);
        
        int maxDiff=0; // maximum difference between original and new absolute diff
        int pos=0;     // index, where the maximum difference occurs
        int newn1=0;    // nums1 value to copy to nums1[pos]
            
        // For each array position i from 0 to n-1, find up to two elements
        // i.e. ceiling and floor element 
        // in nums1 that are closest to nums2[i] (one on each side of nums2[i]).
        // Calculate a new absolute difference for each of these elements.
            for(int i=0; i<nums2.length; i++) {
                int n2 = nums2[i];
                int origDiff = Math.abs(nums1[i] - n2);
                
                
                
            // Find the largest element in nums1 that is less than or equal to
            // the current element in nums2, if such an element exists (floor)
                int floor = arrayFloor(snums1, n2);
                if(floor > Integer.MIN_VALUE) {
                // If a valid element exists, calculate a new absolute difference
                // at the current position, and calculate how much smaller this is
                // than the current absolute difference. If the result is better
                // than what we have seen so far, update the maximum difference and
                // save the data for the current position.
                    int newDiff = Math.abs(floor - n2);
                    int diff = origDiff - newDiff;
                    //If "diff" is +ve, "newDiff" is less than "origDiff"
                    //If "diff" is -ve, "newDiff" is greater than "origDiff"
                    
                    //Compare "diff" with "maxDiff"
                    //maxDiff is the difference which is giving me lesser sum
                    //So, here if "maxDiff" will be greater, then we will be                             //having greater value to reduce, so will get lesser sum
                    if(diff > maxDiff) {
                        pos = i;
                        newn1 = floor;
                        maxDiff = diff;
                    }
                }
                
                
                
                //Do same as above for ceiling value :
                // Find the smallest element in nums1 that is greater than or equal
                // to the current element in nums2, if such an element exists (Ceil)
                int ceiling = arrayCeil(snums1, n2);
                if(ceiling < Integer.MAX_VALUE) {
                    int newDiff = Math.abs(ceiling - n2);
                    int diff = origDiff - newDiff;
                    if(diff > maxDiff) {
                        pos = i;
                        newn1 = ceiling;
                        maxDiff = diff;
                    }
                }
            }
        
        
        // If we found a replacement value, overwrite the original value :
        if(newn1 > 0) {
            nums1[pos] = newn1;
        }
        
        // Calculate the absolute sum difference with the replaced value :
        int sum = 0;
        for(int i=0; i<nums1.length; i++) {
            sum = (sum + Math.abs(nums1[i] - nums2[i])) % mod;
        }
        
        return sum;
    }
    
    
    
    
    // Greatest element less than or equal to val (floor) :
    int arrayFloor(int[] nums, int target) {
        int start=0;
        int end = nums.length-1;
        int floor = Integer.MIN_VALUE;
        
        while(start <= end) {
            int mid = start + (end-start) / 2;
            if(nums[mid] <= target) {
                floor = nums[mid];
                //But also check for some more potential value if possible
                start = mid+1;
            }
            else {                //nums[mid] > target
                end = mid-1;
            }
        }
        return floor;
    }
    
    
    
    
    // Smallest element greater than or equal to val (ceil) :
    int arrayCeil(int[] nums, int target) {
        int start=0;
        int end = nums.length-1;
        int ceil = Integer.MAX_VALUE;
        
        while(start <= end) {
            int mid = start + (end-start) / 2;
            if(nums[mid] >= target) {
                ceil = nums[mid];
                //But also check for some more potential value if possible
                end = mid-1;
            }
            else {                //nums[mid] < target
                start = mid+1;
            }
        }
        return ceil;
    }
}
//https://www.youtube.com/watch?v=frjYWZRs624          (27)
class Solution {
    public int reachNumber(int target) {
        
        //Whether aour target is positive or negative, it will take same number           of steps, because we are starting from 0.
        //Eg : Target=3 : Steps from 0 to 3(go in right side) is three
        //Eg : Target=-3 : Steps from 0 to -3(go in left side) is three
        //So, just take absolute of "target" :
        target = Math.abs(target);
        
        long minPos = Long.MAX_VALUE;
        long minSteps = Long.MAX_VALUE;
        
        int start=1, end=target;
        
        while(start <= end) {
            long mid = start + (end-start)/2;
            //"mid" is midth move
            //Upto midth move, there will be distance i.e. "mid(mid+1)/2" steps             //(using the formula of sum of n natural numbers)
            
            long dist = (mid*(mid+1))/2;
            //distance covered starting from 1 by taking mid steps
            
            //Now, I am at "pos" position i.e. last point of "dist"
            //since we start from 0, final position will be dist ahead of 0
            long pos = dist;
            
            if(pos >= target) {
                
                //Here, minimum number of steps, which I have to take is "mid"
                minSteps = Math.min(minSteps, mid);
                
                //Here, minimum "pos" position, upto which I have to go
                minPos = Math.min(minPos, pos);
                
                end = (int)mid-1;
            }
            else {                       //pos < target
                start = (int)mid+1;
            }
            
        }
            
            //Now, I know "minPos" upto which I have to go, and also I know
            //the target
            //So, calculate "diff" :
            long diff = minPos - target;
            
             //if this difference is:-
        //1) 0(zero): no need of doing anything since we have already reached our target
        //2) even : no need of doing anything, dry run and see that any(one) last step can be flipped in order to reach the target seamlessly
        //3) odd: we need to convert this difference into even. 
        //---3.1)If minSteps taken is already odd, the next(additional) step would produce even distance, that means new distance from the target would be odd+even = odd distance again, so we need to do one more step to make this diff even. So 2 additional steps in total.
        //---3.2)If minSteps is even, the next(additional) step would product odd distance, so new distance from target = odd+odd = even. HURRAH! So 1 additional step in total.
            
            if(diff % 2 != 0) {              //i.e. diff is odd
                if(minSteps % 2 != 0) {
                    minSteps += 2;
                }
                else {
                    minSteps += 1;
                }
            }        
        return (int)minSteps;
    }
}
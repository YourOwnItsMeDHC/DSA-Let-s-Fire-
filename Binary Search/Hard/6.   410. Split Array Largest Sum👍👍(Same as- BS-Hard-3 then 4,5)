//Same as BS - Hard - 3 i.e.
//"3. Allocate minimum number of pages👍👍(Gfg, Coding Ninjas)" :
//https://github.com/YourOwnItsMeDHC/DSA-Let-s-Fire-/blob/master/Binary%20Search/Hard/3.%20%20%20Allocate%20minimum%20number%20of%20pages%F0%9F%91%8D%F0%9F%91%8D(Gfg%2C%20Coding%20Ninjas)

//And, "BS-Hard-4,5" is also same as "BS-Hard-3"


class Solution {
    public int splitArray(int[] nums, int m) {
        
        int start = 0;
        int end = 0;
        
        for (int i=0; i<nums.length; i++) {
            
            //Min answer will be these (if m == n), then in each subarray there
            //will only be one element, so just find max among them :
            start = Math.max(start, nums[i]);     //Max element of 'nums' array
            
            //Max answer will be these (if m == 1), then there will only be one
            //subarr, that will be original arr only, so just add all elements
            end += nums[i]; 
        }
        
        
        //Using Binary Search :
        while(start < end) {
            //Consider mid as potential answer
            int mid = start + (end - start)/2;
            
            
    //Calculate how many pieces can you divide using these "mid" or "max"
    //Keep on adding element continuously until summation of all these
    //element is not greater than mid value
    //If yes, then make another piece starting from that last element only
    //and again check it with mid value, so on.. till last element of array
            int sum = 0;
            int pieces = 1;
            for (int num : nums) {
                if(sum+num > mid) {
                    
                    //If yes, then start with another piece, starting from that                       //last element only, so sum = num
                    sum = num;
                    pieces++;
                }
                else {                      //sum + nums <= mid
                    sum += num;
                }
            }
            
            //Now, we have some pieces/subarray
            
            //Now, check number of pieces is given the answer or not
            if(pieces <= m) {
                
                //yaha pieces/aadmi kam hai "m" ke mukaable, suppose mai laddu
                //baat raha hu, yaha mai ek ek aadmi ko jyaad jyaada laddu de
                //raha hu, maine itna jyaada jyaada laddu de diye ek ek aadmi
                //ko ki mere paas ke laddu khatam ho gaye, aur yaha mujhe "m"
                //number of aadmi ko laddu dena tha, jisme se kuch aadmi ko                     //abhi tak mila nahi hai laddu
                //Sol : To yaha mujhe kam kam laddu baatna padega taaki saare
                //"m" aadmi ko mil jaae laddu
                
                //Yaha aisa bhi ho sakta hai ki saare "m" aadmi ko laadu mil
                //gaye i.e. possible answer, to "mid-1" ke jagah "mid" karo
              
                end = mid;
            }
            else {                           //pieces > m
                
                //Here, we need to decrease the number of pieces
                //So, increase number of elements in each subarray or pieces
                //If we have to add more elements in each subarray or piece
                //Mid value should be more (to which we are comparing)
                //Here, mid is greater than start, so replace start by mid+1
                //So, mid = (s+e)/2 will be more as compared to earlier one
                start = mid+1;
            }
        }
        
        return start;                  //Here, start == end
        
    }
}















//Same code as above, but likhne ka tareeka alag hai
//Neeche waala code "BS-Hard-3,4,5" ke code ke format ke jaisa likha hai
//BS-Hard-3 : "3. Allocate minimum number of pages👍👍(Gfg, Coding Ninjas)" to
///completely same hai
//And, "BS-Hard-4,5" is same as "BS-Hard-3"
class Solution {
    public int splitArray(int[] nums, int m) {
        
        int start = 0;
        int sumOfNums = 0;
        for(int num : nums) {
            sumOfNums += num;
        }
        int end = sumOfNums;
        
        int ans = -1;
        
        while(start <= end) {
            int mid = start + (end-start)/2;
            
            if(isPossible(nums, m, mid)) {
                ans = mid;
                end = mid-1;
            }
            else {
                start = mid+1;
            }
        }
        return ans;       
    }
    
    
    
    boolean isPossible(int[] nums, int m, int mid) {
        int piecesCount = 1;
        int sum = 0;
        
        for(int i=0; i<nums.length; i++) {
            if(sum + nums[i] <= mid) {
                sum += nums[i];
            }
            else {
                piecesCount++;
                sum = nums[i];
                
                if(piecesCount > m || nums[i] > mid) {
                    return false;
                }
            }
        }
        return true;
    }
}
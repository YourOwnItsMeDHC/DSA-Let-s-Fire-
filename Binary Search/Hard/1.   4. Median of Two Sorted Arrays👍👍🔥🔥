//https://youtu.be/NTop3VTjmxk
//https://takeuforward.org/data-structure/median-of-two-sorted-arrays-of-different-sizes/

// //Solution 1: Naive Approach - Using Merge Sort
// class Solution {
//     public double findMedianSortedArrays(int[] nums1, int[] nums2) {
      
//         int m = nums1.length;
//         int n = nums2.length;
//         int[] result = new int[n+m];
        
//         //Merge Sort :
//         int i=0, j=0, k=0;
//         while(i<m && j<n) {
//             if(nums1[i] < nums2[j]) {
//                 result[k++] = nums1[i++];
//                 // k++;
//                 // i++;
//             }
//             else {
//                 result[k++] = nums2[j++];
//             }
//         }
        
//         if(i<m) {
//             while(i<m) {
//                 result[k++] = nums1[i++];                
//             }
//         }
        
//         if(j<n) {
//             while(j<n) {
//                 result[k++] = nums2[j++];
//             }
//         }
        
        
//         //Finding Median :
//         int length = m+n;
//         if(length % 2 == 1) {
//             //Here, length is odd, so calculation will also be odd, but we want index in int
//             //So, add "1" with length , then do calculation, and just then minus that "1"
//             return result[((length+1)/2) - 1];
//         }
//         else {
//             return ((double)result[(length/2)-1] + (double)result[(length/2)]) / 2.0;
//         }
        
//     }
// }









//Solution 2: Efficient solution - Binary Search
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        
        
        if(nums1.length > nums2.length) {
            return findMedianSortedArrays(nums2, nums1);
            //ensuring that binary search happens on minimum size array
            //So, pass smaller length array as first argument
        }
      
        
        //Length of arrays :
        int m = nums1.length;
        int n = nums2.length;
        
        int low=0, high=m, medianPos=((m+n)+1)/2;
        while(low <= high) {
            int cut1 = low + (high-low)/2;
            int cut2 = medianPos - cut1;
            
            //"cut1" denotes the cutting in num1
            //"cut2" denotes the cutting in num2
                       
            //if cut1 is 0 it means nothing is there on left side. Use lesser number there,
            //because, here l1 and l2 has to be lesser than r2 and r1
            //if cut1 is length of array then there is nothing on right side. Use max value
            //there, because, r1 and r2 has to greater than l2 and l1
            
            int l1 = cut1;
            if(cut1 == 0) {
                l1 = Integer.MIN_VALUE;
            }
            else {
                l1 = nums1[cut1-1];
            }
            
            // int l1 = (cut1 == 0) ? Integer.MIN_VALUE : nums1[cut1-1];
            int l2 = (cut2 == 0) ? Integer.MIN_VALUE : nums2[cut2-1];            
            int r1 = (cut1 == m) ? Integer.MAX_VALUE : nums1[cut1];            
            int r2 = (cut2 == n) ? Integer.MAX_VALUE : nums2[cut2];
            
            
            if(l1<=r2 && l2<=r1) {
                 //We have partitioned array at correct place
                // Now get max of left elements and min of right elements to get the median in case of even length combined array size
                // or get max of left for odd length combined array size.
                
                if((m+n)%2 != 0) {
                    return Math.max(l1, l2);
                }
                else {
                    return (Math.max(l1,l2)+Math.min(r1,r2))/2.0;
                }
            }
            else if(l1 > r2) {
                high = cut1-1;
            }
            else {
                low = cut1+1;
            }
        }
        
        return 0.0;
        
    }
}

//Refer Notes(12) For Approach-1 : No need

// //Approach-1 : One Line Code

// class Solution {
//     public int findKthPositive(int[] arr, int k) {
        
// //Suppose the array starts with 8, and you are told to find 5th missing element.
// // Now since array starts with 8 ,it means number 1 to 7 are missing.
// // so 5th missing element is 5 itself (because all numbers before 5 are missing)(1,2,3,4,5). similar is the case for 1st to 7th missing element.

// // Now what if the array starts with 2 i.e for ex [2,8] and ur told to find 5the missing element.
// // here 5 is not the answer, because all number before 5 are not missing, one number is found i.e 2, so the 5th number is actually 6 (1,3,4,5,6) (5 incremented by 1 since one number is found)
// //So, here between 1 to 5, there is only 4 missing number that can be (1,3,4,5) beacause we found "2", but here we are asked to find 5th missing number, so do +1, so we will get (5+1)=6 as our 5th missing number

// // but what if array had a number <= 6 , ex 3 i.e [2,3,8] then 6 wont the the answer since one more number <=6 is found , the missing numbers are [1,4,5,6,7] so again we increment 6 to 7.

// // so we need to keep incrementing K unless all elements in array are less than K,
// // with this K shifts by one for each element <= K found in the list.
        
//         for(int number : arr) {
//             if(number <= k) {
//                 k++;
//             }
//             else {              //number > k
//                 break;          //Break Loop => just return k
//             }
//         }
//         return k;        
//     }
// }








//https://youtu.be/88k8xa-pSrM   (7)
//Approach-2 : Optimized (Binary Search)
class Solution {
    public int findKthPositive(int[] arr, int k) {

       int n = arr.length;
       int left=0, right=n-1;
       int missing = compute(arr[n-1], n);
        
        while(left <= right) {
            int mid = left + (right - left) / 2;
            
            //Upto mid position how many numbers are missing
            missing = compute(arr[mid], mid+1);
            
            if(missing >=k) {
                right = mid-1;
            }
            else {                         //missing < k
                left = mid+1;
            }
        }
        
        //Edge case
        if(right == -1) {
            return k;
        }
        else {
            //actaulValueAtRight + k - countOfMissingNumberAtRight
            //countOfMissingNumberAtRight = actaulValueAtRight - expectedValueAtRight(r+1)
           return arr[right] + k - compute(arr[right], right+1);
        }
        
    }
    
    //Find count of missing numbers up to the position provided :
    int compute(int actual, int expected) {
        return actual-expected;
    }
}
// If any doubt, refer Notes(3 - 4)

/* The isBadVersion API is defined in the parent class VersionControl.
      boolean isBadVersion(int version); */

// //Approach #1 (Linear Scan) [Time Limit Exceeded]
// public class Solution extends VersionControl {
//     public int firstBadVersion(int n) {
        
//        for(int i=0; i<n; i++) {
//            if(isBadVersion(i)) {
//                return i;
//            }
//        }
//         return n;
//     }
// }










//Approach #2 - Optimized Approach (Binary Search) [Accepted]
public class Solution extends VersionControl {
    public int firstBadVersion(int n) {
        
        // In our case, we indicate left and right as the boundary of our         //search space (both inclusive). This is why we initialize
        //left = 1 and right = n
        //Also, we haven't given an array, for to start index from 0
        //We have given numbers from 1 to n
        //So, here our start is 1 and end is n
        
        int start = 1, end = n;
        while(start < end) {
            int mid = start + (end - start) / 2;
            
            if(isBadVersion(mid)) {
                end = mid;
            }
            else {
                start = mid + 1;
            }
        }
        return start;        
    }
}
/** 
 * Forward declaration of guess API.
 * @param  num   your guess
 * @return 	     -1 if num is lower than the guess number
 *			      1 if num is higher than the guess number
 *               otherwise return 0
 * int guess(int num);
 */

// //Approach 1 : Brute Force - Linear Search (TLE)
// public class Solution extends GuessGame {
//     public int guessNumber(int n) {
        
//         //Firstly, guess from starting=0 till n
//         for(int i=0; i<n; i++) {
//             if(guess(i) == 0) {
//                 return i;
//             }
//         }
//         return n;
//     }
// }




//Approach 1 : Optimized - Binary Search
// -1: Your guess is higher than the number I picked (i.e. num > pick).
// 1: Your guess is lower than the number I picked (i.e. num < pick).
// 0: your guess is equal to the number I picked (i.e. num == pick).
public class Solution extends GuessGame {
    public int guessNumber(int n) {
        
        int start=0, end=n;
        while(start <= end) {
            int mid = start + (end - start) / 2;
            
            if(guess(mid) == -1) {
                end =  mid - 1;
            }
            else if(guess(mid) == 1) {
                start = mid + 1;
            }
            else {                          //guess(mid) == picked element
                return mid;
            }
        }
        return -1;
    }
}
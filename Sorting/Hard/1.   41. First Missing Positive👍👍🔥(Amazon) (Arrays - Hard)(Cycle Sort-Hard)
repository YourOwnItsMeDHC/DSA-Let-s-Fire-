// Amazon

//If not understand, just go through ==> Cycle Sort -> Basics -> Easy(1,2) -> Medium(1,2) ->
//Easy(3) -. Then look at "41. First Missing Positive" question

//Refer Notes(26)

//"0" is neither positive nor negative

//Approach - Cycle Sort :
class Solution {
     public int firstMissingPositive(int[] nums) {
         
         //Apply Cycle Sort for sorting the array :
         int i = 0;
         while(i < nums.length) {
             int correctIndex = nums[i]-1;
             
             //So, here whatever we are doing is for finding positive(first missing) number
             //So, if we encounter a number, which is less than 0 i.e. negative, just ignore it
             //So, here in array we should check for positive number = 1 to N, and if number
             //is greater than N then also just ignore it
             //Or else (see below)
             if(nums[i]>0  &&  nums[i]<=nums.length  &&  nums[i] != nums[correctIndex]) {
                 int temp = nums[i];
                 nums[i] = nums[correctIndex];
                 nums[correctIndex] = temp;
             }
             else {
                 i++;
             }
         }
         //Now, array is sorted
         
         
         for(int index=0; index<nums.length; index++) {
             if(nums[index] != index+1) {
                 return index+1;
             }
         }
         
         
         //Here, if all elements are positive[1 to N] in array, so just return "N+1"
         //Eg : Input: nums = [3,2,1] , n=3
         //After Sort: nums = [1,2,3] , so here First Missing Positive ==> N+1 = 3+1 = 4    
          return nums.length+1;
         
     }
}










//https://youtu.be/QeBvfH1dpOU
// class Solution {
//      public int firstMissingPositive(int[] nums) {

// //Step-1 : Mark element which are out of range, and manage presence of one
//          boolean isOnePresent = false;
//          int n = nums.length;
         
//          for(int i=0; i<n; i++) {
//              if(nums[i] == 1) {
//                  isOnePresent = true;
//              }
             
//              if(nums[i]<1 || nums[i]>n) {
//                  nums[i] = 1;
//              }
//          }
         
//          if(isOnePresent == false) {
//              return 1;
//          }
         
// //Step-2 : Map Elements With Index
//          for(int i=0; i<n; i++) {
//              int index = Math.abs(nums[i]);
             
//              //Make Element as negative, which are at index-1 position
//              //It tells, i.e. Element "index" is present in nums Array
//              nums[index-1] = -Math.abs(nums[index-1]);
//          }
         
// //Step-3 : Find Out Missing Integer
//          for(int i=0; i<n; i++) {
//              if(nums[i] > 0) {
//                  return i+1;
//              }
//           }
//          return n+1;
//      }
// }

//See Notes Of NoteBook
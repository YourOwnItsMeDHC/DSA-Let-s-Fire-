//Amazon

//Here, distinct numbers in the range [0, n], which means if n=4
//There will be, in array ==inAnyOrder==> 0, 1, 2, 3, 4 ==> 5 elements

//Cycle Sort Method :
class Solution {
    public int missingNumber(int[] nums) {
        
        //Firstly sort it using cycle sort method :
        int i =0;
        while(i < nums.length) {
            
            //Here, all element's correct index will be it's own value
            //Eg : nums = [9,6,4,2,3,5,7,0,1], n = nums.length = 9
            //After sort : nums = [0, 1, 2, 3, 4, 5, 6, 7, 9]
            //Index      :         0  1  2  3  4  5  6  7  8
            //Above all element's index value is same as it's element's value
            //So, here correct index value (i.e. where that element actually has to be)
            //will be element's value itself
            int correctIndex = nums[i];
            
            //If element is not in it's correct index, just swap it, so after                       //swapping it will come in the position where it has to be
            
            //And also, if element is n=nums.length=9, above index=9 doesn't exist
            //So, in that case just ignore that, do i++, therefore also add condition,
            //that if element is less than "n" then only do swapping or else do i++
            if(nums[i] < nums.length && nums[i] != nums[correctIndex]) {
                int temp = nums[i];
                nums[i] = nums[correctIndex];
                nums[correctIndex] = temp;
            }
            else {
                i++;
            }
        }
        
        
        //Here, all elements has to be at index and that index value itself will be
        //equal to element's value
        //Eg: 
        for(int index=0; index<nums.length; index++) {
            if(nums[index] != index) {
                return index;
            }
        }
        return nums.length;
        
    }
}





// //Using Hashing/Array Method :
// class Solution {
//     public int missingNumber(int[] nums) {
       
//         int[] ans = new int[nums.length+1];
        
//     int j=0;
//       while(j<=nums.length) {
//         for(int i=0; i<nums.length; i++) {
//             if(nums[i] == j) {
//                 ans[j] = 1;
//             }
//          }
//           j++;
//       }
        
//         int val = -1;
//         for(int i=0; i<ans.length; i++) {
//             if(ans[i] == 0) {
//                 val =  i;
//             }
//         }
//         return val;
//     }
// }





// //Sum Method :
// class Solution {
//     public int missingNumber(int[] nums) {
        
//         //Here, we have elements in range [0, n], so, we can calculate "sum of n natural
//         //numbers" i.e. " n * (n+1) /2"
//         int sumOfLength = nums.length * (nums.length+1) / 2;
//         int sum=nums[0];
//         for(int i=1; i<nums.length; i++) {
//             sum += nums[i];
//         }
        
//         //By subtracting "result of sum of n natural numbers" with "actual sum of array"
//         //we will get missing number
//         //Eg : 0+1+2+3+4+5 = 15                   (neglecting "0", we didn't count "0")      
//         //==> Sum of n(6) natural numbers
//         //Assume, "4" is missing , so 0+1+2+3+5 = 11    ==> Actual sum of array
//         //So, missing number = 15 - 11 = 04
        
//         return sumOfLength-sum;
//     }
// }





// //XOR Method :
// class Solution {
//     public int missingNumber(int[] nums) {
        
//         int xorOfN = 0;
//         for(int i=1; i<=nums.length; i++) {
//             xorOfN ^= i;
//         }
        
//         int xorOfnums=nums[0];
//         for(int i=1; i<nums.length; i++) {
//             xorOfnums ^= nums[i];
//         }
        
//         return xorOfN^xorOfnums; 
        
//     }
// }
